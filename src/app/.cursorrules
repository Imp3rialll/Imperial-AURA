# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Current Task: Implementing Purple, White, Black Theme for Imperial Aura Website

Task analysis: The client wants a complete site-wide implementation of a purple, white, and black color scheme with a specific layout structure for the homepage where collection sections are stacked vertically with alternating left/right content arrangement.

Progress:
[X] Update color variables in globals.css to purple/black/white scheme
[X] Fix hydration error in Header component
[X] Update Header component with black background and purple accents
[X] Update Footer component with black background and purple accents
[X] Update Cart component to match the theme
[X] Redesign homepage with sections stacked vertically with alternating content placement
[X] Update Hero component with improved purple accents and hover effects
[X] Update ProductCard component to remove dark mode references and use consistent purple accents
[X] Enhance ProductGrid component with decorative purple accent line under titles
[X] Create custom Button component with various variants for theme consistency
[X] Update homepage to use the Button component for consistency
[X] Create theme documentation to guide future development

Implementation Summary:
- Successfully updated the site with a purple, white, and black color scheme
- Created a consistent component system with the Button component at its core
- Used alternating section layouts on the homepage as requested
- Fixed hydration errors and removed dark mode inconsistencies
- Ensured consistent styling across all components
- Added comprehensive documentation for future development

Future Improvements:
- Form elements could be further enhanced with the theme styling
- Additional UI components could be created for inputs, selects, and other form elements
- Consider using Framer Motion for subtle animations
- Implement a more comprehensive theme system using ShadCN UI

Tech stack used:
- Next.js 15
- React 19
- TypeScript
- Tailwind CSS
- Framer Motion (available but not heavily used yet)
- Shad CN (available but not heavily used yet)

Color palette:
- Primary purple: #7928CA
- Primary dark purple: #5B21B6
- Secondary purple: #9F7AEA 
- Accent purple: #8B5CF6
- White: #FFFFFF
- Black: #000000
- Gray light: #f8f8f8
- Gray: #e0e0e0

Key Design Decisions:
1. Main background is white with black text for maximum readability
2. Header and footer use black backgrounds with white text for contrast
3. Buttons use purple backgrounds with white text for high visibility and brand recognition
4. Secondary buttons use purple borders and transparent backgrounds
5. Hover effects transition to slightly darker purple for a refined luxury feel
6. Homepage sections alternate between white and light gray backgrounds for subtle separation
7. Each homepage collection section alternates between left/right layout for the image and text
8. Decorative purple accent lines are used under section titles for visual interest
9. Product cards use subtle shadows and scale effects on hover for a luxury interactive feel
10. Custom Button component with 4 variants (primary, secondary, accent, outline) for consistent UI